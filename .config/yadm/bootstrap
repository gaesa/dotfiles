#!/usr/bin/env python3
"""
yadm clone --bare --single-branch --branch <branch> <url>
Make sure some programs are installed and force a checkout
"""

from os import environ, getuid
from pathlib import Path
from platform import system
from shutil import which
from subprocess import run

from distro import name


def get_sudo_cmd():
    uid = getuid()
    if uid != 0:
        return ["sudo"]
    else:
        return []


def check_os():
    err_msg = "This script currently doesn't support OS other than Arch Linux"
    if system() != "Linux":
        raise SystemExit(err_msg)
    else:
        if name() != "Arch Linux":
            raise SystemExit(err_msg)
        else:
            return


def check_paru(sudo_cmd):
    if which("paru") is None:
        run([*sudo_cmd, "pacman", "-Syu", "--needed", "base-devel"], check=True)
        dir = environ["TMPDIR"]
        run(
            ["git", "clone", "https://aur.archlinux.org/paru.git"],
            cwd=dir,
            check=True,
        )
        run(["makepkg", "-si"], cwd=Path(dir, "paru"), check=True)
        print()
    else:
        return


def install_common():
    packages = {
        "kitty-terminfo",
        "zoxide",
        "direnv",
        "fzf",
        "zsh",
        "zsh-completions",
        "zsh-history-substring-search",
        "zsh-syntax-highlighting",
        "zsh-theme-powerlevel10k-git",
        "zsh-autosuggestions",
        "tree",
        "fd",
        "ripgrep",
        "trash-cli",
        "neovim",
        "python-pynvim",
        "bat",
        "duf",
        "dust",
        "pkgfile",
        "htop-vim",
    }
    run(["paru", "-Syu", "--needed", *packages], check=True)


def set_worktree():
    run(["yadm", "config", "core.worktree", Path.home()], check=True)


def hide_untracked():
    run(["yadm", "config", "status.showUntrackedFiles", "no"], check=True)


def validate_upstream_branch(branch):
    returncode = run(
        ["yadm", "config", "--get", "remote.origin.fetch"], capture_output=True
    ).returncode
    if returncode != 0:
        run(["yadm", "remote", "set-branches", "origin", branch], check=True)
    else:
        return


def force_checkout(branch):
    run(["yadm", "status"], check=True)
    print()

    want_checkout = input(":: Do you want to force the checkout? [y/N] ")
    if want_checkout in {"y", "Y"}:
        run(["yadm", "checkout", "-f", branch], check=True)
        print()
    elif want_checkout in {"n", "N", ""}:
        return
    else:
        raise SystemExit("Invalid parameter")


def update_submodule():
    has_submodule = run(
        ["yadm", "submodule", "status"], check=True, capture_output=True, text=True
    ).stdout.rstrip()
    if has_submodule != "":
        run(
            ["yadm", "submodule", "update", "--init", "--recursive", "--remote"],
            check=True,
        )
        print()
    else:
        return


def install_for_main():
    run(
        [
            "paru",
            "-Syu",
            "--needed",
            "kitty",
            "lf",
            "ffmpegthumbnailer",
            "python-pymediainfo",
            "atool",
            "emacs-wayland",
            "koi",
            "flameshot",
            "pnpm",
            "ts-node",
            "ttf-nerd-fonts-symbols",
            "ttf-nerd-fonts-symbols-mono",
            "ttf-jetbrains-mono",
            "noto-fonts",
            "noto-fonts-cjk",
            "noto-fonts-emoji",
            "python-black",
            "python-poetry",
            "pyenv",
            "python-pipx",
            "mpv",
            "mpv-mpris",
            "mpd",
            "ncmpcpp",
        ],
        check=True,
    )


def misc_for_main():
    def create_symlink():
        src = Path("~/.local/state/runtime").expanduser()
        if not src.exists():
            des = Path(f"/run/user/{getuid()}")
            src.symlink_to(des, True)
        else:
            return

    create_symlink()


def main():
    check_os()
    set_worktree()
    hide_untracked()

    branch = run(
        ["yadm", "branch", "--show-current"], capture_output=True, text=True, check=True
    ).stdout.rstrip()
    validate_upstream_branch(branch)
    force_checkout(branch)

    update_submodule()

    sudo_cmd = get_sudo_cmd()
    check_paru(sudo_cmd)
    install_common()
    if branch == "main":
        install_for_main()
        misc_for_main()
    else:
        return


if __name__ == "__main__":
    main()
