#!/usr/bin/bash
# yadm clone --bare --single-branch --branch <branch> <url>
# Make sure some programs are installed and force a checkout

if [[ $(grep -E '^NAME=' /etc/os-release | tr -d '"' | cut -c 6-) != 'Arch Linux' ]]; then
    echo "This script currently doesn't support OS other than Arch Linux"
    exit
fi

# Install paru if it doesn't exist
if ! command -v paru &>/dev/null; then
    sudo pacman -Syu --needed base-devel
    cd /tmp || exit
    git clone https://aur.archlinux.org/paru.git
    cd paru || exit
    makepkg -si
    cd "${HOME}" || exit
fi

# Install programs that are required for all branches
paru -Syu --needed kitty-terminfo zoxide fzf zsh zsh-completions zsh-history-substring-search zsh-syntax-highlighting zsh-theme-powerlevel10k-git zsh-autosuggestions git fd ripgrep trash-cli neovim python-pynvim duf dust pkgfile

# An alias
function cf {
    yadm "$@"
}

# Hide untracked files
cf config status.showUntrackedFiles no

# Fix the problem that 'requested upstream branch does not exist'
if ! cf config --get remote.origin.fetch >/dev/null; then
    cf remote set-branches origin --add '*'
fi

# Switch to the desired branch
cf branch -a
read -r -p "$(printf 'Which branch do you want to use?\n')" branch
cf checkout "${branch}"

# Set origin, 'git clone' should have done it
# cf remote add origin <url>
#
# Set default remote for 'git pull'
cf config branch."${branch}".remote origin
cf config branch."${branch}".merge refs/heads/"${branch}"
#
# Set default remote for 'git push'
cf branch --set-upstream-to=origin/"${branch}" "${branch}"
#
# avoid fetching all branches
cf remote set-branches origin "${branch}"

# Do different things for different branches
case "${branch}" in
main)
    # Install different programs for different branches
    sudo pacman -Syu --needed kitty
    read -r -p "$(printf 'Install lf? [Y/n]\n')" if_install
    if_install="${if_install:-y}"
    case "${if_install}" in
    y | Y) sudo pacman -Syu --needed lf ffmpegthumbnailer atool ;;
    n | N) ;;
    *)
        echo "Invalid parameter"
        exit
        ;;
    esac
    ;;
light) ;;
*)
    echo "Invalid parameter"
    exit
    ;;
esac

# Force a checkout
cf status
printf "\n\n"
read -r -p "$(printf 'Do you want to force the checkout? [y/N]\n')" checkout
checkout="${checkout:-n}"
case "${checkout}" in
y | Y)
    cf checkout -f "${branch}"
    printf "\n\n"
    # Initialize submodules
    # Fix the problem: 'fatal: not a git repository'
    if [[ "${branch}" == main ]]; then
        #cf submodule deinit -f ~/.config/ranger/plugins/ranger_devicons
        printf "\n\n"
        cf submodule update --init --recursive --remote
    fi
    ;;
n | N)
    exit
    ;;
*)
    echo "Invalid parameter"
    exit
    ;;
esac
