#!/usr/bin/env python3
# A stupid script that avoids repeatedly typing the script path
# Depends On: fd, ripgrep, trash-cli, shellcheck, neovim

from sys import argv, modules
from subprocess import run
from os.path import basename, join, isfile, expanduser
from my_fn import is_global_user_fn
from my_seq import for_each


def ensure_length(length: int, mes: str):
    def decorator(old_fn):
        def new_fn(*args, **kwargs):
            lst = args[0] if len(args) > 0 else argv
            if len(lst) < length:
                raise SystemExit(mes)
            else:
                old_fn(*args, **kwargs)

        return new_fn

    return decorator


ensure_one_parameter = ensure_length(1, "Missing one argument")
ensure_two_parameters = ensure_length(2, "Missing two arguments")


def get_full_path(param_list: list[str], dir: str):
    return map(lambda item: join(dir, item), param_list)


def ls(param_list: list[str], dir: str):
    obj = [dir] if param_list == [] else get_full_path(param_list, dir)
    run(["ls", "-F", "--color=auto", "--group-directories-first", *obj])


def cat(param_list: list[str], dir: str):
    def display(file: str):
        with open(file, "r") as f:
            print(f.read(), end="")

    def print_separator(i):
        if i != length - 1:
            print("-" * 50, end="\n" * 3)
        else:
            return

    def op(enum: tuple):
        (i, file) = enum
        display(file)
        print_separator(i)

    length = len(param_list)
    for_each(op, enumerate(get_full_path(param_list, dir)))


@ensure_one_parameter
def fd(param_list: list[str], dir: str):
    pattern = " ".join(param_list)
    run(["fd", "-t", "f", pattern, dir, "-x", "printf", r"%s\n", r"{/}"], check=True)


# grep (rg) function
@ensure_one_parameter
def rg(param_list: list[str], dir: str):
    # if no object is found, 'rg' would return an error,
    # but 'none' is not equal to 'error'
    # see also: https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare/
    pattern = " ".join(param_list)
    run(["rg", "--smart-case", pattern, dir])


# trash function
@ensure_one_parameter
def tr(param_list: list[str], dir: str):
    return for_each(
        lambda file: run(["trash", file], check=True),
        get_full_path(param_list, dir),
    )


def get_two_file(param_list: list[str], dir: str):
    return join(dir, param_list[0]), join(dir, param_list[1])


@ensure_two_parameters
def mv(param_list: list[str], dir: str):
    file1, file2 = get_two_file(param_list, dir)
    run(["mv", "-i", file1, file2], check=True)


@ensure_two_parameters
def ln(param_list: list[str], dir: str):
    file1, file2 = get_two_file(param_list, dir)
    run(["ln", "-sr", file1, file2], check=True)


@ensure_two_parameters
def cp(param_list: list[str], dir: str):
    file1, file2 = get_two_file(param_list, dir)
    run(["cp", "-i", file1, file2], check=True)


@ensure_two_parameters
def diff(param_list: list[str], dir: str):
    file1, file2 = get_two_file(param_list, dir)
    run(["nvim", "-d", file1, file2])


# line count function
@ensure_one_parameter
def lc(param_list: list[str], dir: str):
    files = get_full_path(param_list, dir)
    run(["wc", "-l", *files])


@ensure_one_parameter
def shck(param_list: list[str], dir: str):
    return for_each(
        lambda file: run(["shellcheck", "-x", "-o", "all", file]),
        get_full_path(param_list, dir),
    )


# build a list then expand it to neovim or emacs
def edit(param_list: list[str], dir: str):
    import editor
    from stat import S_IMODE
    from os import chmod, stat

    files = tuple(  # iterate over elements multiple times
        get_full_path(param_list, dir)
    )
    editor.edit(files=files)

    def update_permission(permission):
        def get_permission(file):
            return oct(S_IMODE(stat(file).st_mode))

        for_each(
            lambda file: chmod(file, permission),
            filter(
                lambda file: isfile(file) and get_permission(file) != permission, files
            ),
        )

    update_permission(0o744)


@ensure_length(2, f"Missing argument for `{basename(__file__)}`")
def main():
    dir = expanduser("~/.local/bin")
    fn_name = argv[1]
    if is_global_user_fn(fn_name) and (
        fn_name
        not in {
            "get_full_path",
            "edit",
            "main",
            "ensure_length",
            "ensure_one_parameter",
            "ensure_two_parameters",
            "get_two_file",
        }
    ):
        getattr(modules[__name__], fn_name)(argv[2:], dir)
    else:
        edit(argv[1:], dir)


if __name__ == "__main__":
    main()
