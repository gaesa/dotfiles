#!/usr/bin/env python
# A stupid script that avoids repeatedly typing the script path
# Depends On: fd, ripgrep, trash-cli, shellcheck, neovim

import sys
import subprocess
import os.path

input_list = sys.argv
path = os.path.expanduser("~/.local/bin")


# ls function
def fun_ls(input_list, path):
    if len(input_list) == 2:
        subprocess.run(["ls", "-F", "--color=auto", path])
    else:
        for item in input_list[2:]:
            item = path + "/" + item
            subprocess.run(["ls", "-F", "--color=auto", item])


# cat function
def fun_cat(input_list, path):
    for index, item in enumerate(input_list[2:]):
        item = path + "/" + item
        subprocess.run(["cat", item])
        if index != len(input_list[2:]) - 1:
            print("-" * 50, end="", sep="")
            print("\n\n", end="")


# fd function
def fun_fd(input_list, path):
    subprocess.run(
        [
            "fd",
            "--type",
            "file",
            input_list[2],
            path,
            "--exec-batch",
            "printf",
            # one " for 'r', one " for list, one " for shell
            r"""%s\n""",
            r"""{/}""",
        ],
        check=True,
    )


# grep (rg) function
def fun_rg(input_list, path):
    # if no object is found, 'rg' would return an error, but 'none' is not equal to 'error'
    # see also:
    # https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare/
    subprocess.run(["rg", "--smart-case", input_list[2], path])


# rm (trash) function
def fun_rm(input_list, path):
    for item in input_list[2:]:
        item = path + "/" + item
        subprocess.run(["trash", item], check=True)


# mv function
def fun_mv(input_list, path):
    item1 = path + "/" + input_list[2]
    item2 = path + "/" + input_list[3]
    subprocess.run(["mv", "-i", item1, item2], check=True)


# cp function
def fun_cp(input_list, path):
    item1 = path + "/" + input_list[2]
    item2 = path + "/" + input_list[3]
    subprocess.run(["cp", "-i", item1, item2], check=True)


# diff function
def fun_diff(input_list, path):
    item1 = path + "/" + input_list[2]
    item2 = path + "/" + input_list[3]
    subprocess.run(["nvim", "-d", item1, item2], check=True)


# line count function
def fun_lc(input_list, path):
    for item in input_list[2:]:
        item = path + "/" + item
        subprocess.run(["wc", "-l", item])


# shellcheck function
def fun_shck(input_list, path):
    for item in input_list[2:]:
        item = path + "/" + item
        subprocess.run(["shellcheck", "-x", "-o", "all", item])


# pdb funciton
def fun_pdb(input_list, path):
    item = path + "/" + input_list[2]
    subprocess.run(["python", "-m", "pdb", item])


# edit function
# build an array then expand it to neovim
# implementing this with '--remote' is very hard
def fun_edit(input_list, path):
    files = input_list
    for i in range(1, len(files), 1):
        files[i] = path + "/" + files[i]
    # expand list elements as
    # individual parameters to a function
    subprocess.run(["nvim", "-O", *files[1:]], check=True)  # capture_output=True

    for item in files[1:]:
        if os.path.isfile(item) == True:
            result = subprocess.run(["stat", "-c", "%a", item], stdout=subprocess.PIPE)
            permission = result.stdout.decode("utf-8").strip()
            if permission != 744:
                subprocess.run(["chmod", "744", item], check=True)


# check missing argument
if len(input_list) == 1:
    print("Missing argument for", os.path.basename(__file__))
    sys.exit(1)


def ensure_one_parameter(input_list):
    if len(input_list) < 3:
        print("Missing argument for", input_list[1])
        sys.exit(1)
    else:
        return True


def ensure_only_one_parameter(input_list):
    if len(input_list) < 3:
        print("Missing argument for", input_list[1])
        sys.exit(1)
    elif len(input_list) > 3:
        print("Too many arguments for", input_list[1])
        sys.exit(2)
    else:
        return True


def ensure_only_two_parameter(input_list):
    if len(input_list) < 4:
        print("Missing argument for", input_list[1])
        sys.exit(1)
    elif len(input_list) > 4:
        print("Too many arguments for", input_list[1])
        sys.exit(2)
    else:
        return True


match input_list[1]:
    case "ls":
        fun_ls(input_list, path)
    case "cat":
        ensure_one_parameter(input_list)
        fun_cat(input_list, path)
    case "fd":
        ensure_one_parameter(input_list)
        fun_fd(input_list, path)
    case "rg":
        ensure_one_parameter(input_list)
        fun_rg(input_list, path)
    case "rm":
        ensure_one_parameter(input_list)
        fun_rm(input_list, path)
    case "mv":
        ensure_only_two_parameter(input_list)
        fun_mv(input_list, path)
    case "cp":
        ensure_only_two_parameter(input_list)
        fun_cp(input_list, path)
    case "d":
        ensure_only_two_parameter(input_list)
        fun_diff(input_list, path)
    case "lc":
        ensure_one_parameter(input_list)
        fun_lc(input_list, path)
    case "shck":
        ensure_one_parameter(input_list)
        fun_shck(input_list, path)
    case "pdb":
        ensure_only_one_parameter(input_list)
        fun_pdb(input_list, path)
    case _:
        fun_edit(input_list, path)
