#!/usr/bin/env python3
import sys
from argparse import ArgumentParser
from os import getenv, listdir
from os.path import isdir, join
from shutil import move
from subprocess import run
from tempfile import NamedTemporaryFile
from typing import IO

from my_utils.iters import natsort, partition


def sorted_name_list(root: str, names: list[str]) -> list[str]:
    dirs, files = partition(lambda name: isdir(join(root, name)), names, lazy=False)
    return sorted(dirs, key=natsort) + sorted(files, key=natsort)


def save_name_list(name_list: list[str], name_record: IO[str]):
    name_record.write("\n".join(name_list))
    name_record.seek(0)


def rename_edit(name_record: str):
    editor = getenv("EDITOR", "nvim")
    run([editor, name_record], check=True)


def rename_move(
    dir: str, name_list: list[str], name_record: str, _symbols_deleted={" ", "-"}
):
    with open(name_record, "r") as f:
        lines = f.read().splitlines()
    if len(lines) == len(name_list):
        for i in range(len(lines)):
            if lines[i] != name_list[i]:
                src_path = join(dir, name_list[i])
                if lines[i] == "":
                    run(["trash", src_path], check=True)
                else:
                    if lines[i][0] in _symbols_deleted and lines[i][1:] == name_list[i]:
                        run(["trash", src_path], check=True)
                    else:
                        move(src_path, join(dir, lines[i]))
    else:
        mes = (
            "WARNING: Some lines have been deleted, "
            "this operation is not allowed\n"
            "But don't panic, your files are safe "
            "and haven't been modified\n"
            "Please try again with this in mind"
        )
        raise SystemExit(mes)


def get_args() -> list[str]:
    parser = ArgumentParser(description="Process directories.")
    parser.add_argument(
        "directories", type=str, nargs="+", help="directories to be processed"
    )
    return parser.parse_args().directories


def main():
    dirs = get_args()
    for path in dirs:
        if isdir(path):
            name_list = sorted_name_list(path, listdir(path))
            # `delete_on_close` is avaiable in python3.12
            # it defaults to `True`, which is not desirable
            with NamedTemporaryFile(mode="w+", prefix="rename-") as f:
                save_name_list(name_list, f)

                rename_edit(f.name)
                rename_move(path, name_list, f.name)
        else:
            print(f"The given directory '{path}' doesn't exist", file=sys.stderr)


if __name__ == "__main__":
    main()
