#!/usr/bin/env python3
from shutil import which
import sys
from subprocess import CalledProcessError, run
from os import getppid
from os.path import exists, expanduser


def attach_tag(type_tag, contents):
    return (type_tag, contents)


def parse_args(args: list[str]):
    try:
        double_dash_index = args.index("--")
        return attach_tag(False, args[double_dash_index + 1 :])
    except ValueError:
        return attach_tag(True, args)


def trash(files: list[str], check_dash):
    try:
        from my_utils.seq import for_each
    except ModuleNotFoundError:
        sys.path.append(expanduser("~/.local/share/python/lib"))
        from my_utils.seq import for_each

    def p(file: str):
        try:
            run(["trash", "-f", file], check=True)
        except CalledProcessError:
            from pathlib import Path
            from shutil import rmtree

            f = Path(file)
            try:
                if f.is_file() or f.is_symlink():
                    f.unlink(missing_ok=True)
                else:
                    rmtree(f)
            except PermissionError as e:
                if e.errno == 13:
                    run(["/usr/bin/rm", "-rf", file], check=True)
                else:
                    raise

    for_each(
        p,
        filter(
            lambda file: (not file.startswith("-")) and exists(file)
            if check_dash
            else exists,
            files,
        ),
    )


def get_parent_process_name() -> str | None:
    parent_pid = getppid()
    try:
        with open(f"/proc/{parent_pid}/comm", "r") as f:
            parent_process_name = f.read().rstrip()
    except FileNotFoundError:
        parent_process_name = None
    return parent_process_name


def main():
    print(
        f"[{get_parent_process_name()}] Please use 'trash' when possible",
        file=sys.stderr,
    )
    check_dash, files = parse_args(sys.argv[1:])
    if which("trash") is not None:
        trash(files, check_dash)
    else:
        run(["/usr/bin/rm", *sys.argv[1:]], check=True)


if __name__ == "__main__":
    main()
