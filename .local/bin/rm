#!/usr/bin/env python3
import pwd
import sys
from argparse import ArgumentParser
from collections.abc import Callable, Iterator
from getpass import getuser
from os import environ, getppid
from pathlib import Path
from shutil import which
from subprocess import run

try:
    from my_utils.iters import for_each
except ModuleNotFoundError:
    sys.path.append(str(Path("~/.local/share/python/lib").expanduser()))
    from my_utils.iters import for_each

from my_utils.os import slice_path


def parse_args() -> tuple[list[Path], bool, Callable[[], None]]:
    parser = ArgumentParser(description="Safer 'rm' via 'trash', with a warning")
    parser.add_argument("files", nargs="*", type=Path, default=[])
    help_info = "for compatibility, using this option exits the program early"
    parser.add_argument("--version", action="store_true", help=help_info)
    parser.add_argument("--interactive", default=None, help=help_info)
    parser.add_argument("--preserve-root", default=None, help=help_info)
    args, _ = parser.parse_known_args()
    exit_directly = (
        args.version or args.interactive is not None or args.preserve_root is not None
    )
    return args.files, exit_directly, parser.print_help


def trash(files: list[Path]):
    for_each(
        lambda file: run(["trash", "-f", file], check=True),
        filter(
            lambda file: file.exists(),
            files,
        ),
    )


def get_parent_process_name() -> str:
    parent_pid = getppid()
    with open(f"/proc/{parent_pid}/comm", "r") as f:
        return f.read().rstrip()


def find_rm_exe() -> str:
    def filter_paths(
        path: list[str], slice_obj: slice, exclusion: set[str]
    ) -> Iterator[str]:
        return filter(lambda p: str(slice_path(p, slice_obj)) not in exclusion, path)

    exe = which(
        "rm",
        path=":".join(
            filter_paths(environ["PATH"].split(":"), slice(2), {".", "/root", "/home"})
        ),
    )
    if exe is None:
        raise FileNotFoundError("Could not find 'rm' executable")
    else:
        return exe


def is_in_black_list(parent_process_name: str) -> bool:
    def get_default_shell() -> str:
        return str(slice_path(pwd.getpwnam(getuser()).pw_shell, slice(-1, None)))

    if parent_process_name in {"configure", "make", "makepkg", "git-mergetool"}:
        return True
    else:
        return (
            parent_process_name.endswith("sh")
            and parent_process_name != get_default_shell()
        )


def main():
    files, exit_directly, print_help = parse_args()
    if exit_directly:
        print_help()
    else:
        process_name = get_parent_process_name()
        msg = f"[Called by '{process_name}'] rm: Please use 'trash' when possible"
        in_black_list = is_in_black_list(process_name)

        if sys.stderr.isatty() and (not in_black_list):
            print(msg, file=sys.stderr)

        if (which("trash") is not None) and (not in_black_list):
            trash(files)
        else:
            run([find_rm_exe(), *sys.argv[1:]], check=True)


if __name__ == "__main__":
    main()
