#!/usr/bin/env python3
from sys import argv, exit as sys_exit
from os import getcwd
from os.path import getsize, islink, join  # , isdir, dirname
from subprocess import run
from os import getenv


def count_line(file: str) -> int:
    with open(file, "rb") as f:
        return sum(1 for _ in f)


# def find_git_root(dir=getcwd()) -> str | None:
#     if isdir(join(dir, ".git")):
#         return dir
#     elif dir == "/":
#         return None
#     else:
#         return find_git_root(dir=dirname(dir))


def get_tracked_files(path: str) -> list[str]:
    process = run(["/usr/bin/git", "ls-files", path], capture_output=True, text=True)
    if process.returncode == 0:
        files = process.stdout.splitlines()
        return list(filter(lambda file: not islink(file), files))
    else:
        sys_exit(process.stderr.rstrip())
    # The below method is slightly slower than the above
    # res = find_git_root()
    # repo_path = environ["GIT_DIR"] if res is None else res
    # repo = Repo(repo_path)
    # files: list[str] = []
    # for entry in repo.commit().tree.traverse():
    #    files.append(entry.path)  # pyright: ignore [reportGeneralTypeIssues])
    # filter_files = []
    # for file in files:
    #    if isfile(file) and file.startswith(path) and (not islink(file)):
    #        filter_files.append(file)
    # return filter_files


def get_total_count(files: list[str]) -> tuple[int, str, dict[str, int]]:
    def sizeof_fmt(num, suffix="B"):
        for unit in ("", "Ki", "Mi", "Gi", "Ti", "Pi", "Ei", "Zi"):
            if abs(num) < 1024.0:
                return f"{num:3.1f}{unit}{suffix}"
            num /= 1024.0
        return f"{num:.1f}Yi{suffix}"

    total_lines = 0
    total_size = 0
    file_to_lines = {}
    for file in files:
        lines = count_line(file)
        total_lines += lines
        total_size += getsize(file)
        file_to_lines[file] = lines
    return total_lines, sizeof_fmt(total_size), file_to_lines


def sort_count(file_lines: dict[str, int]) -> dict[str, int]:
    return dict(sorted(file_lines.items(), key=lambda x: x[1], reverse=True))


def format_output(file_to_lines: dict[str, int], total_lines: int, total_size: str):
    output = ""
    for file in file_to_lines:
        output += f"{file_to_lines[file]}: {file}\n"
    output += f"Total lines: {total_lines}, "
    output += f"size: {total_size}\n"
    return output


def get_pager():
    pager = getenv("PAGER")
    if pager is None:
        pager = "/usr/bin/less"
    else:
        if not pager.startswith("/"):
            pager = join("/usr/bin", pager)
    return pager


def main() -> None:
    path = argv[1] if len(argv) > 1 else getcwd()
    files = get_tracked_files(path)
    total_lines, total_size, file_to_lines = get_total_count(files)
    file_to_lines = sort_count(file_to_lines)

    output = format_output(file_to_lines, total_lines, total_size)
    run([get_pager()], input=output, text=True)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
