#!/usr/bin/env python3
from sys import argv
from os.path import getsize, join, islink
from subprocess import run
from os import getenv
from functools import reduce
from itertools import filterfalse
from my_utils.git import get_tracked_files
from my_utils.fn import filter_return


get_tracked_files = filter_return(lambda files: filterfalse(islink, files))(
    get_tracked_files
)


def count_line(file: str) -> int:
    with open(file, "rb") as f:
        return sum(1 for _ in f)


def get_total_count(files: list[str]) -> tuple[int, str, dict[str, int]]:
    def sizeof_fmt(num: float, suffix: str = "B") -> str:
        for unit in ("", "Ki", "Mi", "Gi", "Ti", "Pi", "Ei", "Zi"):
            if abs(num) < 1024.0:
                return f"{num:3.1f}{unit}{suffix}"
            else:
                num /= 1024.0
        return f"{num:.1f}Yi{suffix}"

    total_lines, total_size, file_to_lines = 0, 0, {}
    for file in files:
        lines = count_line(file)
        total_lines, total_size = total_lines + lines, total_size + getsize(file)
        file_to_lines[file] = lines
    return total_lines, sizeof_fmt(total_size), file_to_lines


def sort_count(file_lines: dict[str, int]) -> dict[str, int]:
    return dict(sorted(file_lines.items(), key=lambda x: x[1], reverse=True))


def format_output(file_to_lines: dict[str, int], total_lines: int, total_size: str):
    return (
        reduce(
            lambda acc, file: acc + f"{file_to_lines[file]}: {file}\n",
            file_to_lines,
            "",
        )
        + f"Total lines: {total_lines}, "
        f"size: {total_size}\n"
    )


def get_pager():
    pager = getenv("PAGER")
    if pager is None:
        return "/usr/bin/less"
    else:
        if pager.startswith("/"):
            return pager
        else:
            return join("/usr/bin", pager)


def main() -> None:
    files = get_tracked_files(argv[1]) if len(argv) > 1 else get_tracked_files()
    total_lines, total_size, file_to_lines = get_total_count(files)
    file_to_lines = sort_count(file_to_lines)

    output = format_output(file_to_lines, total_lines, total_size)
    run([get_pager()], input=output, text=True)


if __name__ == "__main__":
    try:
        main()
    except (KeyboardInterrupt, EOFError):
        pass
